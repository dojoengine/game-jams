// Generated by dojo-bindgen on Fri, 5 Apr 2024 08:48:48 +0000. Do not modify this file manually.
using System;
using System.Threading.Tasks;
using Dojo;
using Dojo.Starknet;
using UnityEngine;
using dojo_bindings;

// System definitions for `dojo_starter::systems::actions::actions` contract
public class Actions : MonoBehaviour {
    // The address of this contract
    public string contractAddress;

    
    // Call the `dojo_resource` system with the specified Account and calldata
    // Returns the transaction hash. Use `WaitForTransaction` to wait for the transaction to be confirmed.
    public async Task<FieldElement> DojoResource(Account account) {
        return await account.ExecuteRaw(new dojo.Call[] {
            new dojo.Call{
                to = contractAddress,
                selector = "dojo_resource",
                calldata = new dojo.FieldElement[] {
                    
                }
            }
        });
    }
            

    
    // Call the `login` system with the specified Account and calldata
    // Returns the transaction hash. Use `WaitForTransaction` to wait for the transaction to be confirmed.
    public async Task<FieldElement> Login(Account account) {
        return await account.ExecuteRaw(new dojo.Call[] {
            new dojo.Call{
                to = contractAddress,
                selector = "login",
                calldata = new dojo.FieldElement[] {
                    
                }
            }
        });
    }
            

    
    // Call the `start_game` system with the specified Account and calldata
    // Returns the transaction hash. Use `WaitForTransaction` to wait for the transaction to be confirmed.
    public async Task<FieldElement> StartGame(Account account, uint role_category) {
        return await account.ExecuteRaw(new dojo.Call[] {
            new dojo.Call{
                to = contractAddress,
                selector = "start_game",
                calldata = new dojo.FieldElement[] {
                    new FieldElement(role_category).Inner()
                }
            }
        });
    }
            
}
        